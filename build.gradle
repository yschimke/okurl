plugins {
  id 'com.github.ben-manes.versions' version '0.15.0'
  id 'net.nemerosa.versioning' version '2.6.1'
}

apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'maven'

group = 'com.baulsupp'

versioning {
  releaseMode = project.hasProperty('releaseMode') ? project.property('releaseMode') : 'snapshot'
}

version = versioning.info.display

description = """OkHttp Social Authentication"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

jar {
  manifest {
    attributes("Implementation-Title": "OkSocial", "Implementation-Version": version)
  }
}

distTar {
  compression = Compression.GZIP
}

repositories {
  maven { url "https://jitpack.io" }
  maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
  compile group: 'com.baulsupp', name: 'oksocial-output', version: '0.6'
  compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.9.0'
  compile group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '3.9.0'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0'
  compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml',
      version: '2.9.0'
  compile(group: 'com.twitter', name: 'joauth', version: '6.0.2') {
    exclude(module: 'guava')
  }
  compile group: 'org.eclipse.jetty.aggregate', name: 'jetty-all', version: '9.4.7.RC0',
      classifier: 'uber'
  compile(group: 'com.github.mrmike', name: 'ok2curl', version: '0.3.2') {
    exclude(module: 'okhttp')
  }
  compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
  compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
  compile group: 'commons-io', name: 'commons-io', version: '2.5'
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
  compile group: 'org.slf4j', name: 'slf4j-jcl', version: '1.7.25'
  compile group: 'org.zeroturnaround', name: 'zt-exec', version: '1.10'
  compile group: 'com.google.guava', name: 'guava', version: '23.0'
  compile group: 'com.jakewharton.byteunits', name: 'byteunits', version: '0.9.1'
  compile group: 'io.netty', name: 'netty-all', version: '4.1.15.Final'
  compile group: 'io.netty', name: 'netty-resolver-dns', version: '4.1.15.Final'
  compile group: 'io.airlift', name: 'airline', version: '0.8'
  compile group: 'org.junit.platform', name: 'junit-platform-surefire-provider',
      version: '1.0.0-RC3'
  compile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0-RC3'
  compile group: 'org.junit.jupiter', name: 'junit-jupiter-migration-support', version: '5.0.0-M4'
  compile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '4.12.0-RC3'
  compile files('external/osxkeychain.jar')
  compile group: 'io.zipkin.reporter', name: 'zipkin-sender-okhttp3', version: '1.0.2'
  compile group: 'io.zipkin.brave', name: 'brave-okhttp', version: '4.6.0'
  compile group: 'io.zipkin.brave', name: 'brave-instrumentation-okhttp3', version: '4.6.0'
  compile group: 'io.zipkin.brave', name: 'brave', version: '4.6.0'

  testCompile group: 'com.squareup.okhttp3', name: 'okhttp-testing-support', version: '3.9.0'
  testCompile group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '3.9.0'

  runtime 'org.mortbay.jetty.alpn:alpn-boot:8.1.7.v20160121'
}

distributions {
  main {
    contents {
      from("${rootProject.projectDir}") {
        include "README.md", "LICENSE"
      }
      from("${rootProject.projectDir}/src/main/scripts") {
        fileMode 0755
        into "bin"
      }
      from("${rootProject.projectDir}/certificates") {
        into "certificates"
      }
      from("${rootProject.projectDir}/commands") {
        fileMode 0755
        into "bin"
      }
      from("${rootProject.projectDir}/bash") {
        into "bash"
      }
      from("${rootProject.projectDir}/src/main/resources") {
        into "scripts"
        include "oksocial.js"
      }
      into('lib') {
        from jar
        from(project.configurations.runtime).exclude("*alpn-boot*")
      }
      into('alpn') {
        from(project.configurations.runtime).include("*alpn-boot*")
      }
    }
  }
}

//packaging tests
task packageTests(type: Jar) {
  from sourceSets.test.output
  classifier = 'tests'
}

artifacts.archives packageTests

